ordered_DS <- order(round(sort(cor_DS[1,]),4), decreasing=TRUE)
orddered_DS
ordered_DS
ordered_DS[]
data(mtcars)
lm_Data <- lm(mpg ~ cyl+disp+hp+drat+wt+qsec+vs+am+gear+carb, mtcars)
step <- stepAIC(lm_Data, direction="both")
test <- step$anova
test$Step
test$DF
test$attr
summary(test)
str(test)
?shuttle
glm(use~wind, shuttle)
glm(shuttle$use ~ shuttle$wind, family="bionomial")
glm(shuttle$use ~ shuttle$wind, family="binomial")
fit <- glm(shuttle$use ~ shuttle$wind, family="binomial")
summary(fit)
?glm
fit <- glm(shuttle$use ~ shuttle$wind, family="bionomial")
exp(fit$coeff)
fit <- glm(shuttle$use ~ shuttle$wind * magn, family="bionomial")
exp(fit$coeff)
fit <- glm(shuttle$use ~ shuttle$wind, family="bionmial")
exp(fit$coeff)
fit <- glm(shuttle$use ~ shuttle$wind, family="binomial")
exp(fit$coeff)
fit <- glm(shuttle$use ~ shuttle$wind * shuttle$magn, family="binomial")
exp(fit$coeff)
fit <- glm(shuttle$use ~ factor(shuttle$wind), family="binomial")
exp(fit$coeff)
summary(fit)
fit <- glm(shuttle$use ~ factor(shuttle$wind) * shuttle$magn, family="binomial")
exp(fit$coeff)
summary(fit)
fit <- glm(shuttle$use ~ factor(shuttle$wind) * factor(shuttle$magn), family="binomial")
exp(fit$coeff)
fit <- glm(shuttle$use ~ factor(shuttle$wind), family="binomial")
summary(fit)
fit <- glm((1-shuttle$magn) ~ factor(shuttle$wind), family="binomial")
fit <- glm(I(1-shuttle$magn) ~ factor(shuttle$wind), family="binomial")
data(shuttle)
test <- shuttle
fit <- glm(I(shuttle$magn ~ factor(shuttle$wind)) - 1, family="binomial")
fit <- glm(formula = (I(shuttle$magn - 1) ~ shuttle$wind, family="binomial")
fit <- glm(formula = (I(shuttle$magn - 1) ~ shuttle$wind), family="binomial")
fit <- glm(formula = (I(1 - shuttle$magn) ~ shuttle$wind), family="binomial")
fit <- glm(formula = (I(1 - shuttle$wind) ~ shuttle$wind), family="binomial")
fit <- glm(formula = (shuttle$wind ~ shuttle$wind) - 1, family="binomial")
fit <- glm(shuttle$wind ~ shuttle$wind, family="binomial")
fit <- glm(shuttle$wind ~ shuttle$mgn, family="binomial")
fit <- glm(shuttle$wind ~ shuttle$magn, family="binomial")
exp(fit$coeff-1)
fit <- glm(shuttle$use ~ shuttle$wind, family="binomial")
summary(fit-1)
summary(fit$coeff-1)
exp(fit$coeff-1)
as.numeric(shuttle$vis)
shuttle$vis <- as.numeric(shuttle$vis)
fit2 <- glm(I(1-shuttle$vis) ~ shuttle$wind, family="binomial")
fit2 <- glm(I(shuttle$vis-1) ~ shuttle$wind, family="binomial")
fit <- glm(shuttle$use ~ shuttle$wind, family="binomial")
summary(fit)$coeff
summary(fit2)$coeff
fit2 <- glm(I(shuttle$use-1) ~ shuttle$wind, family="binomial")
shuttle$vis <- as.numeric(shuttle$use)
fit2 <- glm(I(shuttle$use-1) ~ shuttle$wind, family="binomial")
shuttle$use <- as.numeric(shuttle$use)
fit2 <- glm(I(shuttle$use-1) ~ shuttle$wind, family="binomial")
fit <- glm(shuttle$use ~ shuttle$wind, family="binomial")
data(shuttle)
fit <- glm(shuttle$use ~ shuttle$wind, family="binomial")
summary(fit)$coeff
shuttle$use <- as.numeric(shuttle$use)
fit2 <- glm(I(1-shuttle$use) ~ shuttle$wind, family="binomial")
shuttle$newUse <- as.numeric(shuttle$use == "auto")
data(shuttle)
shuttle$newUse <- as.numeric(shuttle$use == "auto")
fit2 <- glm(I(1-shuttle$use) ~ shuttle$wind, family="binomial")
fit2 <- glm(I(1-shuttle$newUse) ~ shuttle$wind, family="binomial")
fit <- glm(shuttle$use ~ shuttle$wind, family="binomial")
summary(fit)$coeff
summary(fit2)$coeff
shuttle$noAuto <- as.numeric(shuttle$use == "noauto")
fit2 <- glm(I(1-shuttle$noAuto) ~ shuttle$wind, family="binomial")
summary(fit2)$coeff
summary(fit)$coeff
data(gaData)
data(InsectSpray)
data(InsectSprays)
?InsectSprays
glm(InsectSprays$spray ~ InsectSprays$julian, family="poisson")
glm(InsectSprays$spray ~ InsectSprays$count, family="poisson")
glm(InsectSprays$count ~ InsectSprays$spray, family="poisson")
fit <- glm(InsectSprays$count ~ InsectSprays$spray, family="poisson")
summary(fit)
exp(fit$coeff)
?glm
fit <- glm(InsectSprays$count ~ InsectSprays$spray, family="poisson()")
fit <- glm(InsectSprays$count ~ InsectSprays$spray, family=poisson())
summary(fit)
exp(fit$coeff)
?aov
fm1 <- aov(count ~ spray, data = InsectSprays)
summary(fm1)
fm1 <- aov(count ~ spray, data = InsectSprays)
summary(fm1)
t <- log(5)
t2 <- log(10) + t
fit1 <- glm(InsectSprays$count ~ InsectSprays$spray + offset(t), family = poisson)
fit2 <- glm(count ~ x + offset(t2), family = poisson)
t <- log(5)
t2 <- log(10) + t
fit1 <- glm(InsectSprays$count ~ InsectSprays$spray + offset(t), family = poisson)
fit2 <- glm(InsectSprays$count ~ InsectSprays$spray + offset(t2), family = poisson)
t <- log(5)
t2 <- log(10) + t
fit1 <- glm(InsectSprays$count ~ InsectSprays$spray + offset(t), family = poisson)
count <- c(1,3,5,4,7,8,2)
x <- c(4.5)
t <- log(5)
t2 <- log(10) + t
fit1 <- glm(count ~ x + offset(t), family = poisson)
fit2 <- glm(count ~ x + offset(t2), family = poisson)
count <- c(1,3,5,4,7,8,2)
x <- c(4,5,6)
t <- log(5)
t2 <- log(10) + t
fit1 <- glm(count ~ x + offset(t), family = poisson)
fit2 <- glm(count ~ x + offset(t2), family = poisson)
count <- c(1,3,5,4,7,8,2)
x <- c(4,5,6,6,5,4,4)
t <- log(5)
t2 <- log(10) + t
fit1 <- glm(count ~ x + offset(t), family = poisson)
fit2 <- glm(count ~ x + offset(t2), family = poisson)
offset(t2)
count <- c(1,3,5,4,7,8,2)
x <- c(1,1,1,1,1,0,0)
t <- log(5)
t2 <- log(10) + t
fit1 <- glm(count ~ x + offset(t), family = poisson)
fit2 <- glm(count ~ x + offset(t2), family = poisson)
count <- c(1,3,5,4,7,8,2)
x <- c(1,1,1,1,1,0,0)
t <- log(5)
t2 <- log(10) + t
fit1 <- glm(count ~ factor(x) + offset(t), family = poisson)
fit2 <- glm(count ~ factor(x) + offset(t2), family = poisson)
count <- c(1,3,5,4,7,8,2)
x <- c(1,1,1,1,1,0,0)
t <- c(log(1),log(3),log(5),log(4),log(7),log(8),log(2))
t2 <- log(10) + t
fit1 <- glm(count ~ factor(x) + offset(t), family = poisson)
fit2 <- glm(count ~ factor(x) + offset(t2), family = poisson)
fm1 <- aov(count ~ spray, data = InsectSprays)
summary(fit1)
fm1 <- aov(count ~ spray, data = InsectSprays)
summary(fit2)
count <- c(1,3,5,4,7,8,2)
x <- c(1,1,1,1,1,0,0)
t <- c(log(1),log(3),log(5),log(4),log(7),log(8),log(2))
t2 <- log(10) + t
fit1 <- glm(count ~ factor(x) + offset(t), family = poisson)
fit2 <- glm(count ~ factor(x) + offset(t2), family = poisson)
summary(fit1)$coeff
summary(fit2)$coeff
?ln
date
date()
date() + 3
date(3)
?date
?sys.time()
sys.time()
Sys.time()
Sys.time() + 1
Sys.time() + 20
Sys.time()
Sys.time()
Sys.time()
Sys.time()
count <- c(1,3,5,4,7,8,2)
x <- c(1,1,1,1,1,0,0)
t <- c(log(Sys.time()),log(Sys.time()),log(Sys.time()),log(Sys.time()),
log(Sys.time()),log(Sys.time()),log(Sys.time()))
t2 <- log(10) + t
fit1 <- glm(count ~ factor(x) + offset(t), family = poisson)
fit2 <- glm(count ~ factor(x) + offset(t2), family = poisson)
summary(fit2)$coeff
summary(fit1)$coeff
count <- c(1,3,5,4,7,8,2)
x <- c(1,1,1,1,1,0,0)
t <- c(Sys.time(),Sys.time(),Sys.time(),Sys.time()),
log(Sys.time()),log(Sys.time()),log(Sys.time()))
t2 <- log(10) + t
fit1 <- glm(count ~ factor(x) + offset(t), family = poisson)
fit2 <- glm(count ~ factor(x) + offset(t2), family = poisson)
count <- c(1,3,5,4,7,8,2)
x <- c(1,1,1,1,1,0,0)
t <- c(Sys.time(),Sys.time(),Sys.time(),Sys.time(),
Sys.time(),Sys.time(),Sys.time())
t2 <- log(10) + t
fit1 <- glm(count ~ factor(x) + offset(t), family = poisson)
fit2 <- glm(count ~ factor(x) + offset(t2), family = poisson)
summary(fit1)$coeff
summary(fit2)$coeff
time()
?time
as.vector(time(presidents))
time(presidents)
time(5)
time(6)
time(1945)
time(c(1945, 1946))
count <- c(1,3,5,4,7,8,2)
x <- c(1,1,1,1,1,0,0)
t <- c(log(time(presidents)))
t2 <- log(10) + t
fit1 <- glm(count ~ factor(x) + offset(t), family = poisson)
fit2 <- glm(count ~ factor(x) + offset(t2), family = poisson)
count <- c(1,3,5,4,7,8,2)
x <- c(1,1,1,1,1,0,0)
t <- c(log(Sys.time()),log(Sys.time()),log(Sys.time()),log(Sys.time()),
log(Sys.time()),log(Sys.time()),log(Sys.time()))
t2 <- log(10) + t
fit1 <- glm(count ~ factor(x) + offset(t), family = poisson)
count <- c(1,3,5,4,7,8,2)
x <- c(1,1,1,1,1,0,0)
t <- c(log(13),log(5),log(4),log(20), log(46),log(2),log(1))
t2 <- log(10) + t
fit1 <- glm(count ~ factor(x) + offset(t), family = poisson)
fit2 <- glm(count ~ factor(x) + offset(t2), family = poisson)
summary(fit1)$coeff
summary(fit2)$coeff
count <- c(1,3,5,4,7,8,2)
x <- c(1,1,1,1,1,0,0)
t <- c(log(13),log(5),log(4),log(20), log(46),log(2),log(1))
t2 <- log(5) + t
fit1 <- glm(count ~ factor(x) + offset(t), family = poisson)
fit2 <- glm(count ~ factor(x) + offset(t2), family = poisson)
summary(fit1)$coeff
summary(fit2)$coeff
count <- c(1,3,5,4,7,8,2)
x <- c(1,1,1,1,1,0,0)
t <- c(log(13),log(5),log(4),log(20), log(46),log(2),log(1))
t2 <- log(5) + t
fit1 <- glm(count ~ factor(x) + offset(t), family = poisson)
fit2 <- glm(count ~ factor(x) + offset(t2), family = poisson)
summary(fit1)$coeff
summary(fit2)$coeff
n <- 500; x <- seq(0, 4 * pi, length = n); y <- sin(x) + rnorm(n, sd = .3)
n <- 500; x <- seq(0, 4 * pi, length = n); y <- sin(x) + rnorm(n, sd = .3)
knots <- seq(0, 8 * pi, length = 20);
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
xMat
?cbind
summary(xMat)
str(xMat)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
terms <- sapply(knots, function(knot) (x>knot) * (x - know))
terms <- sapply(knots, function(knot) (x>knot) * (x - knowt))
terms <- sapply(knots, function(knot) (x>knot) * (x - knot))
xMat <- cbind(1, x, terms)
fit <- lm(y ~ xMat - 1)
fit
summary(fit)$coeff
class(xMat)
xMat
plot(x,y)
lines(x, predict(fit))
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
terms <- sapply(knots, function(knot) (x>knot) * (x - know))
xMat <- cbind(1, x, terms)
fit <- lm(y ~ xMat - 1)
yhat <- predict(fit)
plot(x,y)
lines(x, yhat)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
terms <- sapply(knots, function(knot) (x>knot) * (x - knot))
xMat <- cbind(1, x, terms)
fit <- lm(y ~ xMat - 1)
yhat <- predict(fit)
plot(x,y)
lines(x, yhat)
yhat
?exp
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
terms <- sapply(knots, function(knot) (x>knot) * (x - knot))
terms
xMat <- cbind(1, x, terms)
xMat
fit <- lm(y ~ xMat - 1)
summary(fit)
?lm
yhat <- predict(fit)
yhat
?predict
fit <- glm(shuttle$use ~ shuttle$wind * shuttle$magn, family="binomial")
exp(fit$coeff)
data(shuttle)
data(shuttle)
require(datasets)
data(shuttle)
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
data(shuttle)
fit <- glm(shuttle$use ~ shuttle$wind * shuttle$magn, family="binomial")
exp(fit$coeff)
summary(fit)$coeff
swirl()
swirl
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
fit <- lm(child ~ parent, galton)
fit$residuals
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum(galton$child - mu)^2
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(sTot)
sRes <- deviance(sRes)
sRes <- deviance(sum(sTot)^2)
?deviance
sRes <- deviance(sTot
)
sRes <- deviance(galton$child)
galton$child
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit)
sRes/sTot - 1
1-sRes/sTot
summary(fit)$r.squared
cor(fit)
cor(galton$child, galton$par)
cor(galton$parent,galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
all <- lm(Fertility ~ ., swiss)
all
summary(all)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms <- function(){
# Store the coefficient of linear models with different independent variables
cf <- c(coef(lm(Fertility ~ Agriculture, swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic,swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic + Education,swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic + Education + Examination,swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic + Education + Examination +Infant.Mortality, swiss))[2])
print(cf)
}
makelms()
urlTraining <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
urlTesting <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile <- "./pml-training.csv"
testingFile <- "./pml-testing.csv"
if( !file.exists(trainingFile) ) download.file(urlTraining, mode="w", trainingFile, method="curl")
if( !file.exists(testingFile) ) download.file(urlTesting, mode="w", testingFile, method="curl")
training_DS <- read.csv(file="pml-training.csv", header=TRUE, sep=",")
testing_DS <- read.csv(file="pml-testing.csv", header=TRUE, sep=",")
##Remove all rows where all elements of the row are set to NA
training_DS <- training_DS[rowSums(is.na(training_DS)) != ncol(training_DS),]
##Remove all columns where all elements of the column are set to NA
training_DS <- training_DS[,colSums(is.na(training_DS))<nrow(training_DS)]
##Remove first couple of variables that have nothing to do with activity monitoring measurements
training_DS <- training_DS[,-c(1:7)]
##Remove summary variables
training_DS <- training_DS[, -grep("avg|var|amplitude|stddev|kurtosis|skewness|max|min", colnames(training_DS))]
output <-nearZeroVar(training_DS, saveMetrics= TRUE)
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
output <-nearZeroVar(training_DS, saveMetrics= TRUE)
varCor <- abs(cor(training_DS[,-length(names(training_DS))]))
corVarsToRemove <- findCorrelation(varCor, cutoff=0.75)
colnames(training_DS)[corVarsToRemove]
training_DS <- training_DS[, -corVarsToRemove]
findLinearCombos(training_DS[,-length(names(training_DS))])
set.seed(3000)
inTrain <- createDataPartition(y=training_DS$classe, p=0.75, list=FALSE)
training <- training_DS[inTrain,]
testing <- training_DS[-inTrain,]
set.seed(3000)
modelFit <- train(classe ~., data=training, trControl=trainControl(method = "cv", number = 10), method="rf")
set.seed(3000)
modelFit <- train(classe ~., data=training, trControl=trainControl(method = "cv", number = 10), method="rf")
modelFit
plot(modelFit)
modelFit$finalModel
confusionMatrix(modelFit, testing)
confusionMatrix(modelFit, testing$classe)
confusionMatrix(testing$classe, modelFit)
predModelFit <- predict(modelFit, testing)
confusionMatrix(testing$classe, modelFit)
confusionMatrix(testing$classe, predModelFit)
predVal <- predict(modelFit, testing_DS)
predVal
confusionMatrix(testing_DS, predVal)
predVal <- predict(modelFit, testing_DS, type="prob")
predVal
ModelFit
modelFit
predVal <- predict(modelFit, testing_DS)
predVal
getwd()
setwd("/Users/brenda_acting/datasciencecoursera/PracticalMachineLearning")
getwd()
setwd("prjSubmissions")
setwd("prjSubmission")
getwd()
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(predVal)
modFitRPart <- train(classe ~., data=training, method="rpart")
modelFitRpart
modelFitRPart
modFitRPart
confusionMatrix(training$classe, predict(modFitRPart, training))
modFitRPart <- train(classe ~., data=training, method="rpart", trControl=trainControl(method = "cv", number = 10))
confusionMatrix(training$classe, predict(modFitRPart, training))
?rpart
test <- confusionMatrix(training$classe, predict(modFitRPart, training))
class(test)
test$Accuracy
test$accuracy
test$overall
test$overall[1]
confMatrixRF <- confusionMatrix(training$classe, predict(modelFit, training))
confatrixRF
confMatrixRF
confMatrixRF <- confusionMatrix(training$classe, predict(modelFit, training))
confMatrixRF
confMatrixRF <- confusionMatrix(testing$classe, predict(modelFit, testing))
confMatrixRF
urlTraining <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
urlTesting <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile <- "./pml-training.csv"
testingFile <- "./pml-testing.csv"
if( !file.exists(trainingFile) ) download.file(urlTraining, mode="w", trainingFile, method="curl")
if( !file.exists(testingFile) ) download.file(urlTesting, mode="w", testingFile, method="curl")
training_DS <- read.csv(file="pml-training.csv", header=TRUE, sep=",")
testing_DS <- read.csv(file="pml-testing.csv", header=TRUE, sep=",")
##Remove all rows where all elements of the row are set to NA
training_DS <- training_DS[rowSums(is.na(training_DS)) != ncol(training_DS),]
##Remove all columns where all elements of the column are set to NA
training_DS <- training_DS[,colSums(is.na(training_DS))<nrow(training_DS)]
##Remove first couple of variables that have nothing to do with activity monitoring measurements
training_DS <- training_DS[,-c(1:7)]
##Remove summary variables
training_DS <- training_DS[, -grep("avg|var|amplitude|stddev|kurtosis|skewness|max|min", colnames(training_DS))]
output <-nearZeroVar(training_DS, saveMetrics= TRUE)
varCor <- abs(cor(training_DS[,-length(names(training_DS))]))
corVarsToRemove <- findCorrelation(varCor, cutoff=0.75)
colnames(training_DS)[corVarsToRemove]
training_DS <- training_DS[, -corVarsToRemove]
findLinearCombos(training_DS[,-length(names(training_DS))])
inTrain <- createDataPartition(y=training_DS$classe, p=0.75, list=FALSE)
training <- training_DS[inTrain,]
testing <- training_DS[-inTrain,]
modelFitRP <- train(classe ~., data=training, trControl=trainControl(method = "cv", number = 10), method="rpart")
modelFitRP
confMatrixRP <- confusionMatrix(training$classe, predict(modelFitRP, training))
confMatrixRP
fancyRpartPlot(modelFitRP$finalModel)
library("rattle", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
fancyRpartPlot(modelFitRP$finalModel)
pdf( "mygraph.pdf", width = 11, height = 8 )
fancyRpartPlot(modelFitRP$finalModel)
pdf( "mygraph.pdf", width = 1100, height = 800 )
fancyRpartPlot(modelFitRP$finalModel)
png(file="mygraphic.png",width=1100,height=800)
fancyRpartPlot(modelFitRP$finalModel)
dev.off()
dev.off()
dev.off()
dev.off()
png("plot.png", width = 1100, height = 600, units="px")
fancyRpartPlot(modelFitRP$finalModel)
urlTraining <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
urlTesting <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile <- "./pml-training.csv"
testingFile <- "./pml-testing.csv"
if( !file.exists(trainingFile) ) download.file(urlTraining, mode="w", trainingFile, method="curl")
if( !file.exists(testingFile) ) download.file(urlTesting, mode="w", testingFile, method="curl")
training_DS <- read.csv(file="pml-training.csv", header=TRUE, sep=",")
testing_DS <- read.csv(file="pml-testing.csv", header=TRUE, sep=",")
testing_DS$classe
testing_DS$X
